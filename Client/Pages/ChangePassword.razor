@page "/ChangePassword/{Id}"
@inherits AppComponentBase
@attribute [Authorize(Roles = "Admin,Manager")]

<div class="container mt-4">
    <div class="row">
        <div class="col-md-6 offset-md-3">
            <div class="card">
                <div class="card-header bg-warning text-white">
                    <h4>تغییر پسورد کاربر</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@PasswordModel" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="mb-3">
                            <label class="form-label">پسورد جدید</label>
                            <InputText type="password" class="form-control" @bind-Value="PasswordModel.NewPassword" />
                            <ValidationMessage For="@(() => PasswordModel.NewPassword)" />
                        </div>

                        <div class="mb-3">
                            <label class="form-label">تکرار پسورد جدید</label>
                            <InputText type="password" class="form-control" @bind-Value="PasswordModel.ConfirmPassword" />
                            <ValidationMessage For="@(() => PasswordModel.ConfirmPassword)" />
                        </div>

                        <div class="d-flex gap-2 mb-3">
                            <button type="submit" class="btn btn-warning" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>در حال تغییر پسورد...</span>
                                }
                                else
                                {
                                    <span>تغییر پسورد</span>
                                }
                            </button>
                        </div>

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private ChangePasswordDto PasswordModel = new ChangePasswordDto();
    private bool isLoading = false;
    private string errorMessage;
    private string successMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        if (!int.TryParse(Id, out int userId))
        {
            errorMessage = "شناسه کاربر معتبر نیست!";
            return;
        }

        PasswordModel.UserId = userId;
    }

    private async Task HandleValidSubmit()
    {
        if (PasswordModel.NewPassword != PasswordModel.ConfirmPassword)
        {
            errorMessage = "پسوردها یکسان نیستند!";
            return;
        }

        isLoading = true;
        errorMessage = string.Empty;
        successMessage = string.Empty;

        try
        {
            if (await _User.ChangePassword(PasswordModel))
            {
                AlertService.Show("پسورد با موفقیت تغییر یافت!");
                await Task.Delay(2000);
                AuthStateProvider.NotifyUserLogout();
                NavManager.NavigateTo("/login");
            }
            else
            {
                AlertService.Show("خطا در تغییر پسورد");
            }
        }
        catch (Exception ex)
        {
            errorMessage = $"خطا در سرور";
        }
        finally
        {
            isLoading = false;
        }
    }

    
}
