@page "/configurations"
@inherits AppComponentBase
@attribute [Authorize]


<PageTitle>مدیریت سرویس ها</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4>ثبت سرویس در برنامه جهت دریافت فایل به صورت دوره ای</h4>
                </div>
                <div class="card-body">
                    <h5>فیلد های مورد نظر را تکمیل نمایید</h5>
                    <div class="row mb-3">
                        <div class="col-md-3">
                            <input type="text" class="form-control" @bind="newConfig.ApiEndpoint" 
                                   placeholder="آدرس مقصد" />
                        </div>
                        <div class="col-md-2">
                            <input type="number" class="form-control" @bind="newConfig.IntervalMinutes" 
                                   placeholder="دوره زمانی-دقیق-1" min="1" />
                        </div>
                        <div class="col-md-3">
                            <input type="text" class="form-control" @bind="newConfig.FileName" 
                                   placeholder="نام فایل (.json)" />
                        </div>
                        <div class="col-md-2">
                            <div class="form-check mt-2">
                                <input class="form-check-input" type="checkbox" @bind="newConfig.IsEnabled" id="enableNew">
                                <label class="form-check-label" for="enableNew">
                                    فعال
                                </label>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <button class="btn btn-success" @onclick="AddConfiguration">
                               ثبت سرویس
                            </button>
                        </div>
                    </div>

                    @if (!string.IsNullOrEmpty(message))
                    {
                        <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3" role="alert">
                            @message
                        </div>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <div class="d-flex justify-content-between align-items-center">
                        <h5>سرویس های فعال</h5>
                        <button class="btn btn-sm btn-primary" @onclick="LoadConfigurations">
                            Refresh
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    @if (configurations.Any())
                    {
                        <table class="table table-striped">
                            <thead>
                                <tr>
                                    <th>نام فایل</th>
                                    <th>آدرس</th>
                                    <th>دوره</th>
                                    <th>وضعیت</th>
                                    <th>آخرین زمان دریافت</th>
                                    <th>عملیات</th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var config in configurations)
                                {
                                    <tr>
                                        <td>@config.FileName</td>
                                        <td>
                                            <small>@config.ApiEndpoint</small>
                                        </td>
                                        <td>@config.IntervalMinutes min</td>
                                        <td>
                                            @if (config.IsEnabled)
                                            {
                                                <span class="badge bg-success">فعال</span>
                                            }
                                            else
                                            {
                                                <span class="badge bg-secondary">غیر فعال</span>
                                            }
                                        </td>
                                        <td>
                                            @if (config.LastFetchTime.HasValue)
                                            {
                                                <small>@config.LastFetchTime.Value.ToString("yyyy-MM-dd HH:mm:ss")</small>
                                            }
                                            else
                                            {
                                                <small>هرگز</small>
                                            }
                                        </td>
                                        <td>
                                            <button class="btn btn-sm btn-warning" 
                                                    @onclick="() => ToggleConfiguration(config)">
                                                @(config.IsEnabled ? "غیرفعال" : "فعال")
                                            </button>
                                            <button class="btn btn-sm btn-danger" 
                                                    @onclick="() => DeleteConfiguration(config.FileName)">
                                                حذف
                                            </button>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    }
                    else
                    {
                        <p>هیچ سرویس در سیستم ثبت نشده است.جهت ثبت اقدام نمایید.</p>
                    }
                </div>
            </div>

            <div class="card mt-3">
                <div class="card-header">
                    <h5>تنظیمات سرویس:</h5>
                </div>
                <div class="card-body">
                    <p>
                        <strong>آدرس سرویس ها:</strong> 
                        <code>Configurations/api-configs.txt</code>
                    </p>
                    <p>
                        <strong>تنظیمات سرویس ها:</strong> 
                        <code>Configurations/service-settings.txt</code>
                    </p>
                    <p>
                        <strong>مسیر ذخیره سازی:</strong> 
                        <code>FetchedData/</code>
                    </p>
                    <p class="text-muted">
                        <small>
                            سرویس پس‌زمینه، تغییرات پیکربندی را در هر بازه زمانی مشخص شده در service-settings.txt بررسی می‌کند (پیش‌فرض: ۳۰ ثانیه). برای تغییر این مقدار، مقدار CheckInterval را در service-settings.txt ویرایش کنید.
                        </small>
                    </p>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private List<ApiConfiguration> configurations = new();
    private ApiConfiguration newConfig = new() 
    { 
        IntervalMinutes = 1,
        FileName = "data.json",
        ApiEndpoint = "/api/access/vehicles/access-info",
        IsEnabled = true
    };
    private string message = string.Empty;
    private bool isError = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadConfigurations();
    }

    private async Task LoadConfigurations()
    {
        try
        {
            configurations = await ConfigService.LoadConfigurationsAsync();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configurations");
            ShowMessage("Error loading configurations", true);
        }
    }

    private async Task AddConfiguration()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(newConfig.ApiEndpoint))
            {
                ShowMessage("Please enter an API endpoint", true);
                return;
            }

            if (string.IsNullOrWhiteSpace(newConfig.FileName))
            {
                ShowMessage("Please enter a file name", true);
                return;
            }

            if (!newConfig.FileName.EndsWith(".json"))
            {
                newConfig.FileName += ".json";
            }

            // Check if configuration already exists
            var existing = configurations.FirstOrDefault(c => c.FileName == newConfig.FileName);
            if (existing != null)
            {
                ShowMessage($"Configuration for {newConfig.FileName} already exists", true);
                return;
            }

            newConfig.CreatedAt = DateTime.Now;
            await ConfigService.SaveConfigurationAsync(newConfig);
            
            ShowMessage($"Configuration added for {newConfig.FileName}", false);
            
            // Reset form
            newConfig = new() 
            { 
                IntervalMinutes = 1,
                FileName = "data.json",
                ApiEndpoint = "/api/access/vehicles/access-info",
                IsEnabled = true
            };
            
            await LoadConfigurations();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error adding configuration");
            ShowMessage($"Error: {ex.Message}", true);
        }
    }

    private async Task ToggleConfiguration(ApiConfiguration config)
    {
        try
        {
            config.IsEnabled = !config.IsEnabled;
            await ConfigService.UpdateConfigurationAsync(config.FileName, config);
            
            ShowMessage($"{config.FileName} has been {(config.IsEnabled ? "enabled" : "disabled")}", false);
            await LoadConfigurations();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error toggling configuration");
            ShowMessage($"Error: {ex.Message}", true);
        }
    }

    private async Task DeleteConfiguration(string fileName)
    {
        try
        {
            await ConfigService.DeleteConfigurationAsync(fileName);
            ShowMessage($"{fileName} has been deleted", false);
            await LoadConfigurations();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error deleting configuration");
            ShowMessage($"Error: {ex.Message}", true);
        }
    }

    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
    }
}