@page "/"
@using ServicesGateManagment.Client.Services
@using ServicesGateManagment.Shared
@using ServicesGateManagment.Shared.Models.Common
@inject IConfigService ConfigService
@inject IVehicleService VehicleService
@inject IJSRuntime JSRuntime
@inject ILogger<Index> Logger

<PageTitle>Services Gate Management - Dashboard</PageTitle>

@if (!string.IsNullOrEmpty(message))
{
    <div class="alert @(isError ? "alert-danger" : "alert-success") mt-3" role="alert">
        @message
    </div>              
}  
<div class="page-header">
    <h1 class="page-title">Dashboard</h1>
    <div class="breadcrumb">
        <span class="breadcrumb-item active">Home</span>
    </div>
</div>

<div class="dashboard-content">
    <!-- Statistics Cards -->
    <div class="grid grid-cols-4 mb-lg">
        <div class="stat-card">
            <div class="stat-icon stat-icon-primary">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M19 3h-1V1h-2v2H8V1H6v2H5c-1.11 0-1.99.9-1.99 2L3 19c0 1.1.89 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zm0 16H5V8h14v11zM7 10h5v5H7z" />
                </svg>
            </div>
            <div class="stat-value">@AllInsertServices</div>
            <div class="stat-label">?? ????? ??? ????</div>
           
        </div>

        <div class="stat-card">
            <div class="stat-icon stat-icon-success">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" />
                </svg>
            </div>
            <div class="stat-value">@AllInsertServices</div>
            <div class="stat-label">????? ????? ?? ??? ?????</div>

        </div>

        <div class="stat-card">
            <div class="stat-icon stat-icon-warning">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2L2 7l10 5 10-5-10-5zM2 17l10 5 10-5M2 12l10 5 10-5" />
                </svg>
            </div>
            <div class="stat-value">@IsSendRrgisterVehicle</div>
            <div class="stat-label">?? ????? ????? ????</div>
            <div class="stat-change stat-change-negative">
                <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                    <path fill-rule="evenodd" d="M7.646 11.354a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 9.793V5.5a.5.5 0 0 0-1 0v4.293L5.354 7.646a.5.5 0 0 0-.708.708l3 3z" />
                </svg>
                -3% from yesterday
            </div>
        </div>

        
        <div class="stat-card">
            <div class="stat-icon stat-icon-success">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.48 2 2 6.48 2 12s4.48 10 10 10 10-4.48 10-10S17.52 2 12 2zm-2 15l-5-5 1.41-1.41L10 14.17l7.59-7.59L19 8l-9 9z" />
                </svg>
            </div>
            <div class="stat-value">@AllInsertServices</div>
            <div class="stat-label">????? ????? ??? ??? ???</div>

        </div>
        <div class="stat-card">
            <div class="stat-icon stat-icon-danger">
                <svg width="24" height="24" viewBox="0 0 24 24" fill="currentColor">
                    <path d="M12 2C6.47 2 2 6.47 2 12s4.47 10 10 10 10-4.47 10-10S17.53 2 12 2zm5 13.59L15.59 17 12 13.41 8.41 17 7 15.59 10.59 12 7 8.41 8.41 7 12 10.59 15.59 7 17 8.41 13.41 12 17 15.59z" />
                </svg>
            </div>
            <div class="stat-value">@AllRrgisterVehicle</div>
            <div class="stat-label">????? ????? ??? ???? ??????? ?? ?????</div>
        </div>
    </div>

    <!-- Main Content Area -->
    <div class="grid grid-cols-2 gap-lg">
        <!-- Data Fetcher Card -->
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">Quick Data Fetch</h4>
            </div>
            <div class="card-body">
                <div class="form-group">
                    <label for="apiEndpoint" class="form-label">API Endpoint</label>
                    <input type="text" class="form-control" id="apiEndpoint" @bind="apiEndpoint"
                    placeholder="Enter API endpoint" />
                    <div class="mt-sm">
                        <span class="text-secondary">Quick access:</span>
                        <div class="flex gap-sm mt-sm">
                            <button class="btn btn-sm btn-outline" @onclick='() => SetEndpoint("/api/ServicesGateManagement/access-Vehicles")'>
                                Vehicles
                            </button>
                            <button class="btn btn-sm btn-outline" @onclick='() => SetEndpoint("/api/ServicesGateManagement/access-gates")'>
                                Gates
                            </button>
                        </div>
                    </div>
                </div>

                <div class="form-group">
                    <label for="fileName" class="form-label">File Name</label>
                    <input type="text" class="form-control" id="fileName" @bind="fileName"
                    placeholder="Enter file name (e.g., data.json)" />
                </div>

                <div class="flex gap-sm">
                    <button class="btn btn-primary" @onclick="FetchData" disabled="@isLoading">
                        @if (isLoading)
                        {
                            <span class="spinner spinner-sm"></span>
                            <span>Fetching...</span>
                        }
                        else
                        {
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path fill-rule="evenodd" d="M10.854 8.146a.5.5 0 0 1 0 .708l-3 3a.5.5 0 0 1-.708 0l-1.5-1.5a.5.5 0 0 1 .708-.708L7.5 10.793l2.646-2.647a.5.5 0 0 1 .708 0z" />
                                <path d="M8 1a2.5 2.5 0 0 1 2.5 2.5V4h-5v-.5A2.5 2.5 0 0 1 8 1zm3.5 3v-.5a3.5 3.5 0 1 0-7 0V4H1v10a2 2 0 0 0 2 2h10a2 2 0 0 0 2-2V4h-3.5z" />
                            </svg>
                            <span>Fetch Data</span>
                        }
                    </button>

                    @if (!string.IsNullOrEmpty(fetchedData))
                    {
                        <button class="btn btn-success" @onclick="SaveToFile">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="currentColor">
                                <path d="M.5 9.9a.5.5 0 0 1 .5.5v2.5a1 1 0 0 0 1 1h12a1 1 0 0 0 1-1v-2.5a.5.5 0 0 1 1 0v2.5a2 2 0 0 1-2 2H2a2 2 0 0 1-2-2v-2.5a.5.5 0 0 1 .5-.5z" />
                                <path d="M7.646 11.854a.5.5 0 0 0 .708 0l3-3a.5.5 0 0 0-.708-.708L8.5 10.293V1.5a.5.5 0 0 0-1 0v8.793L5.354 8.146a.5.5 0 1 0-.708.708l3 3z" />
                            </svg>
                            Save
                        </button>
                        <button class="btn btn-ghost" @onclick="ClearData">
                            Clear
                        </button>
                    }
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="alert alert-danger mt-md">
                        @errorMessage
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="alert alert-success mt-md">
                        @successMessage
                    </div>
                }
            </div>
        </div>

        <!-- Recent Activity -->
        <div class="card">
            <div class="card-header">
                <h4 class="card-title">????? ??</h4>
            </div>
            <div class="card-body">
                <div class="activity-list">

                    @{
                        foreach (var item in configurations)
                        {
                              <div class="activity-item">
                        <div class="activity-icon bg-success">
                            <svg width="16" height="16" viewBox="0 0 16 16" fill="white">
                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                            </svg>
                        </div>
                        <div class="activity-content">
                            <p class="activity-text">??? ????:@item.FileName</p>
                            <p class="activity-text">???? ?????:@item.IntervalMinutes</p>
                            <span class="activity-time">?????:@item.IsEnabled</span>
                        </div>
                    </div>
                        }
                    }

                  



                </div>
            </div>
        </div>
    </div>

</div>

@code {
    private string apiEndpoint = "/api/access/vehicles/access-info";
    private string fileName = "vehicles-data.json";
    private List<ApiConfiguration> configurations = new();
    private string fetchedData = string.Empty;
    private string errorMessage = string.Empty;
    private string successMessage = string.Empty;
    private string dataSize = string.Empty;
    private bool isLoading = false;
    private int AllRrgisterVehicle = 0;
    private int IsSendRrgisterVehicle = 0;
    private int NotSendRrgisterVehicle = 0;
    private int AllInsertServices = 0;
    private int CountAllowedVehicle = 0;
    private string message = string.Empty;
    private bool isError = false;



    protected override async Task OnInitializedAsync()
    {
        await LoadIndex();
    }

    private async Task LoadIndex()
    {


        try
        {
            configurations = await ConfigService.LoadConfigurationsAsync();
            var resultInfoVehicleInDB = await VehicleService.GetAllRequestVehicle();//Get All requst st in DB Local For Analiz
            AllRrgisterVehicle = resultInfoVehicleInDB.Count();
            IsSendRrgisterVehicle = resultInfoVehicleInDB.Where(p => p.IsSent == true).Count();
            NotSendRrgisterVehicle = resultInfoVehicleInDB.Where(p => p.IsSent == false).Count();
            AllInsertServices = configurations.Count();
            CountAllowedVehicle = await VehicleService.CountVehicleInFileJson();
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error loading configurations");
            ShowMessage("Error loading configurations", true);
        }


    }
    private void SetEndpoint(string endpoint)
    {
        apiEndpoint = endpoint;
    }
    private async Task FetchData()
    {
        errorMessage = string.Empty;
        successMessage = string.Empty;
        isLoading = true;

        try
        {
            if (string.IsNullOrWhiteSpace(apiEndpoint))
            {
                errorMessage = "Please enter an API endpoint";
                return;
            }

            Logger.LogInformation($"Fetching data from: {apiEndpoint}");
            FetchDataRequest request = new FetchDataRequest()
                {
                    Endpoint = apiEndpoint
                };
            fetchedData = await ConfigService.FetchExternalDataAsync(request);

            var bytes = System.Text.Encoding.UTF8.GetBytes(fetchedData);
            dataSize = FormatFileSize(bytes.Length);

            successMessage = $"Data fetched successfully! Size: {dataSize}";
            Logger.LogInformation(successMessage);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
            Logger.LogError(ex, "Error fetching data");
        }
        finally
        {
            isLoading = false;
        }
    }
    private async Task SaveToFile()
    {
        try
        {
            if (string.IsNullOrWhiteSpace(fileName))
            {
                errorMessage = "Please enter a file name";
                return;
            }

            var finalFileName = fileName.EndsWith(".json") ? fileName : fileName + ".json";
            var bytes = System.Text.Encoding.UTF8.GetBytes(fetchedData);
            var base64 = Convert.ToBase64String(bytes);

            await JSRuntime.InvokeVoidAsync("downloadFileFromBase64", finalFileName, base64);
            successMessage = $"File '{finalFileName}' downloaded successfully!";
        }
        catch (Exception ex)
        {
            errorMessage = $"Error saving file: {ex.Message}";
            Logger.LogError(ex, "Error saving file");
        }
    }
    private string FormatFileSize(long bytes)
    {
        string[] sizes = { "B", "KB", "MB", "GB" };
        int order = 0;
        double size = bytes;

        while (size >= 1024 && order < sizes.Length - 1)
        {
            order++;
            size /= 1024;
        }

        return $"{size:0.##} {sizes[order]}";
    }
    private void ClearData()
    {
        fetchedData = string.Empty;
        errorMessage = string.Empty;
        successMessage = string.Empty;
        dataSize = string.Empty;
    }
    private void ShowMessage(string msg, bool error)
    {
        message = msg;
        isError = error;
    }
}