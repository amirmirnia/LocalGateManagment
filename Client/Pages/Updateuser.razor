@page "/Updateuser/{Id}"
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]
@using System.ComponentModel.DataAnnotations
@using Microsoft.AspNetCore.Components.Forms
@using ServicesGateManagment.Client.Services
@inject NavigationManager NavManager
@inject IUser _User


<div class="container mt-4">
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h4>ثبت کاربر جدید</h4>
                </div>
                <div class="card-body">
                    <EditForm Model="@newUser" OnValidSubmit="HandleValidSubmit">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">نام</label>
                                <InputText class="form-control" @bind-Value="newUser.FirstName" />
                                <ValidationMessage For="@(() => newUser.FirstName)" />
                            </div>
                            <div class="col-md-6">
                                <label class="form-label">نام خانوادگی</label>
                                <InputText class="form-control" @bind-Value="newUser.LastName" />
                                <ValidationMessage For="@(() => newUser.LastName)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">ایمیل</label>
                                <InputText type="email" class="form-control" @bind-Value="newUser.Email" />
                                <ValidationMessage For="@(() => newUser.Email)" />
                            </div>
                        </div>

                        <div class="row mb-3">
                            <div class="col-md-6">
                                <label class="form-label">نقش کاربر</label>
                                <InputSelect class="form-control" @bind-Value="newUser.Role">
                                    @foreach (var role in Enum.GetValues<UserRole>())
                                    {
                                        <option value="@role">@role</option>
                                    }
                                </InputSelect>
                                <ValidationMessage For="@(() => newUser.Role)" />
                            </div>
                        </div>

                        <div class="d-flex gap-2 mb-3">
                            <button type="submit" class="btn btn-primary" disabled="@isLoading">
                                @if (isLoading)
                                {
                                    <span class="spinner-border spinner-border-sm me-2" role="status"></span>
                                    <span>در حال ویرایش...</span>
                                }
                                else
                                {
                                    <span>ویرایش کاربر</span>
                                }
                            </button>

                        </div>

                        @if (!string.IsNullOrEmpty(successMessage))
                        {
                            <div class="alert alert-success">
                                @successMessage
                            </div>
                        }

                        @if (!string.IsNullOrEmpty(errorMessage))
                        {
                            <div class="alert alert-danger">
                                @errorMessage
                            </div>
                        }
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public string Id { get; set; }
    private UserDto newUser = new UserDto();
    private bool isLoading = false;
    private string successMessage;
    private string errorMessage;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        int userId;
        if (!int.TryParse(Id, out userId))
        {
            errorMessage = "شناسه کاربر معتبر نیست!";
            return;
        }

        newUser = await _User.GetUserById(userId);
    } 
    private async Task HandleValidSubmit()
    {
        isLoading = true;
        successMessage = string.Empty;
        errorMessage = string.Empty;

        // try
        // {

        //     await User.RegisterUser(newUser);

        //     // فرض کنید اینجا درخواست به API زده می‌شود
        //     successMessage = $"کاربر {newUser.FirstName} {newUser.LastName} با موفقیت ثبت شد!";
        //     newUser = new RegisteUserDto(); // پاک کردن فرم بعد از ثبت موفق
        // }
        // catch (Exception ex)
        // {
        //     errorMessage = $"خطا در ثبت: {ex.Message}";
        // }
        // finally
        // {
        //     isLoading = false;
        // }
    }

}
